{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","tests","setTests","useEffect","axios","get","then","response","data","console","log","filter","d","shp","map","date","new","positivetests","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uPA+BeA,EA1BH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,KAgBhB,OAXAC,qBAAU,WACRC,IACGC,IAJW,sFAKXC,MAAK,SAAAC,GACJL,EAASK,EAASC,KAAKA,WAE1B,IACHC,QAAQC,IAAIT,EAAM,KAKhB,gCACE,mGACCA,EAAMU,QAAO,SAAAC,GAAC,MAAc,8BAAVA,EAAEC,OAAqCC,KAAI,SAAAF,GAAC,OAC7D,8BAAG,4BAAIA,EAAEG,OAAT,qBAAoC,4BAAIH,EAAEI,MAA1C,6CAAyF,4BAAIJ,EAAEK,gBAA/F,cCbOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.9ad8c743.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\nimport axios from 'axios';\n// import { LineChart, Line } from 'recharts';\n\nconst App = () => {\n  const [tests, setTests] = useState([])\n\n  const baseUrl = \"https://plus.yle.fi/lambda_sheets/korona/2020-04-test-amounts-cumulative/data.json\"\n\n  useEffect(() => {\n    axios\n      .get(baseUrl)\n      .then(response => {\n        setTests(response.data.data)\n      })\n  }, [])\n  console.log(tests[21])\n  \n  \n  \n  return (\n    <div>\n      <h1>Positiivisten koronatestien osuus on yhä alle kaksi prosenttia</h1>\n      {tests.filter(d => d.shp === \"Kaikki sairaanhoitopiirit\").map(d => \n        <p><b>{d.date}</b> Suomessa tehtiin <b>{d.new}</b> uutta testiä, joista oli positiivisia <b>{d.positivetests}</b>.</p>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n// https://plus.yle.fi/lambda_sheets/korona/2020-04-municipalities-infections-cumulative/data.json\n// https://plus.yle.fi/lambda_sheets/korona/2020-04-test-amounts-cumulative/data.json\n// https://plus.yle.fi/lambda_sheets/korona/2021-01-korona_ikaryhma/data.json\n// https://plus.yle.fi/lambda_sheets/korona/2021-01-korona_sukupuoli/data.json\n\n\n/* <LineChart width={600} height={400} data={filtered}>\n<Line type=\"monotone\" dataKey=\"infections\" stroke=\"#0000ff\" />\n</LineChart> */\n\n  // console.log(tests.filter(c => c.shp === \"Ahvenanmaa\").map(d => d.cumulative))\n\n\n  // const numbers = [\n  //   {\n  //   area: 'Espoo',\n  //   cumulative: '80',\n  //   new: '2'\n  //   },\n  //   {\n  //   area: 'Vantaa',\n  //   cumulative: '180',\n  //   new: '25'\n  //   },\n  //   {\n  //   area: 'Turku',\n  //   cumulative: '50',\n  //   new: '4'\n  //   },\n  //   {\n  //   area: 'Raisio',\n  //   cumulative: '..',\n  //   new: '0'\n  //   }\n  // ]\n\n  // const cleanData = numbers.filter(d => d.cumulative !== \"..\")\n\n  // const sortNumbers = (a, b) => { return b.cumulative - a.cumulative}\n  // // const sorted = cleanData.sort(sortNumbers)\n  // console.log(cleanData)\n\n  // {sorted.map(d => \n  //   <p key={d.area}>{d.area} // {d.perhundredthousand} // {d.cumulative} </p>\n  //   )}\n\n\n  // const filterDate = tests.filter(d => d.date === \"15.1.2021\")\n  \n  // const removeEmpties = filterDate.filter(d => d.cumulative !== \"..\")\n\n  // const sorted = removeEmpties.sort(function (a, b) {\n  //   return b.cumulative - a.cumulative;\n  // });\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}